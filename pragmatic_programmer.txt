Chapter 1 - Pragmatic Philosophy

###################################
what makes a pragmatic programmer?
###################################
1. early adopter/fast adapter
you have an instinct for technology + techniques
you love to try things out
when you learn something new, you grasp it quickly + integrate with existing knowledge 

2. inquisitive
you tend to ask questions
you are a pack rat for little facts 

3. critical thinker
you rarely take things as a given without examining the facts yourself

4. realistic
you try to understand the underlying nature of each challenge you face
have realistic expectations of how difficult the task is and how long it will take
gives you the stamina to keep at it

5. jack of all trades 
you try hard to be familiar with a broad range of technologies and environments
you work to keep aware of new developments 

######
tip 1 - care about your craft 
######
there is no point about developing software unless you care about doing it well

######
tip 2 - think about your work
######
ongoing critical appraisal
never run on autopilot

#########################
topic 1 - it's your life
#########################
######
tip 3 - take agency
######
does your work environment suck?
try to fix it, but not forever

want to work remotely? have you asked?
if they say no then find someone who will say yes

be proactive

#########################
topic 2 - the cat ate my source code
#########################
take responsibility for yourself + your actions in terms of career advancement and learning

your team needs to be able to trust you + rely on you 

responsibility is something you have to actively agree to
you have the right not to take responsibility

when you do take responsibility you need to be accountable for it
if you make mistakes admit it honestly and try to offer options

don't blame or make up excuses 

######
tip 4 - provide options, don't make lame excuses
######
before you approach anyone to tell them why something cannot be done, is late, is broken > stop + write it down
does your excuse sound reasonable or stupid?
how would it sound to your boss?
before you go and give them the bad news, is there anything else you can try?

instead of excuses, provide options
explain what can be done to salvage the situation

do you need to learn something at greater depth? 
would a book or course help?
don't be afraid to ask or admit that you need help

try to flush out the lame excuses before communicating them to someone else

"I don't know - but I will find out"
it's ok to admit you don't know AND take responsibility for learning more

#########################
topic 3 - software entropy
#########################
######
tip 5 - don't live with broken windows
######
don't leave "broken windows" (bad design, wrong decisions, poor code) unrepaired
fix it if you have time
if you do not have time, at least board it up
take some action to prevent further damage + show you are on top of the situation
neglect accelerates rot more than any other factor

don't cause collateral damage just because there is a crisis of some sort

#########################
topic 4 - stone soup + boiled frogs
#########################
good idea to create a MVP to share 
ppl tend to join an ongoing success vs a theoretical idea

######
tip 6 - be a catalyst of change
######
tip 7 - remember the big picture 
######

#########################
topic 5 - good enough software
#########################
allow users to determine if you've built software that is good enough for their needs
know when to stop and move on

######
tip 8 - make quality a requirements issue
######
often tradeoffs are involved when specifying requirements
many users would prefer to use software with rough edges today vs wait a year for the polished version
especially given what they may need something totally different in a year from now
if you givce your users something to play with earlier > feedback > better product

#########################
topic 6 - your knowledge portfolio
#########################
"An investment in knowledge always pays the best interest" -Ben Franklin
learning new things = most important strategic asset

how do you learn how to learn?
how do you learn what to learn?

1. invest regularly
consistently study

2. diversify
the more different things you know, the more valuable you are
as a baseline know the ins-and-outs of the technology you need today 
but don't stop there
the more tech you know > better to adjust to constant change

3. manage risk
don't put all your technical eggs in one basket
invest in high-risk, high-reward learning AND low-risk, low-reward learning

4. buy low sell high
learning an emerging technology before it becomes popular can be as hard as finding an undervalued stock
but the payoff can be just as rewarding

5. review and rebalance

######
tip 9 - invest regularly in your knowledge portfolio
######
1. learn at least one new programming language every year
different languages solve the same problems in different ways
learning diff approaches > broaden thinking + avoid getting stuck in a rut

2. read a technical book each month
web articles are great but books > deep understanding

3. read non-technical books too
computers are used by people
don't forget the human side of the equation = entirely different skill set

4. take classes

5. participate in local user groups + meetups
don't just go + listen
actively participate
learn what other people are working on outside of your company

6. experiment with diff environments
ex: be willing to work with Pycharm :)

7. stay current
keep your finger on the pulse on tech outside your current project

it doesn't matter if you use what you learn
the process of learning > expand thinking > open to new possibilities + new ways of doing things

opportunities for learning
if you don't know the answer to the question, find out!
take it as a personal challenge to find the answer

if you can't find the answer yourself, find other people who do know the answer
talk to other people about the problem + build your network

######
tip 10 - critically analyze what you read and hear 
######
critical thinking 
think critically about what you learn
ensure your knowledge is accurate
not swayed by vendor or media hype

ask the 5 whys 
a favorite consulting trick = ask why at least 5 times
may get closer to the truth as a result

who does this benefit? follow the money

what's the context?
consider an article touting best practices... best for who?
what are the prereqs? what are the consequences?
both short and long term

when or where would this work?
under what circumstances? 
don't stop at what will happen next, keep going to what will happen after that?

why is this a problem?
is there an underlying model?
does the underlying model work?

#########################
topic 7 - communicate 
#########################
a good idea is useless without effective communication
treat english like you would write code = DRY, ETC, automation
######
tip 11 - English is just another programming language 
######
know your audience

gather feedback 
don't just wait for questions - ask for questions
continually improve the knowledge of your audience as you communicate

know what you want to say
jot down a couple of ideas you want to communicate 
plan a couple strategies for getting them across

choose your moment
"is this a good time to talk about...?"

make it look good
check spelling

involve your audience
we often find that the documents we produce end up being less important than the process we go through to produce them
if possible, involve your readers in early drafts of the document
get their feedback + pick their brains
you'll build a good working relationship + you'll write a better doc as a result

be a listener
if you don't listen to them, they won't listen to you
encourage people to talk by asking questions
or have them summarize what you tell them
turn the meeting into a dialogue + you'll make your point more effectively
and who knows maybe you'll learn something :) 

get back to people
always respond to people even if it is to say "I'll get back to you later"
keeping people informed makes them far more forgiving of the occassional slip
makes them feel like you haven't forgotten them

######
tip 12 it's both what you say and the way you say it 
######
the more effective your communication, the more influential you become
be mindful - email + slack is documentation that lasts forever 

write documentation
its an integral part of the development process
it can make it easier by not duplicating efforts or wasting time
keep the documentation close to the code 

######
tip 13 build documentation in, don't bolt it on
######
it's easy to produce good looking documentation from the comments in source code
code shows how it is done
use the comments to share why something is done

Chapter 2 - Pragmatic Approach

#########################
topic 8 - the essence of good design 
#########################
######
tip 14 - good design is easier to change than bad design 
######
a thing is well designed if it adapts to the people who use it
for code, that means it must adapt by changing
ETC principle = easier to change

why is decoupling good? 
because by isolating concerns we make each easier to change

why is the single responsibility principle good?
because a change of requirements is mirrored by a change in just one module

why is naming important?
because good code names makes code easier to read
easier to read = easier to change

ETC is a value, not a rule
ask yourself consistently "did I just make the overall system easier or harder to change?"

try to make what you write replaceable
that way whatever happens in the future, this chunk of code won't be a roadblock
it's all about keeping code decoupled and cohesive 

not sure how things will change?
make a note of the choices you have
make a note of guesses of how things will change
later look back and review

challenge
think about languages and programming paradigms (OOP, functional)
do any have real big positives or negatives when it comes to writing ETC code?
Python = readable = easy to understand = easy to change

what about functional programming?

#########################
topic 9 - DRY 
#########################
do not duplicate knowledge throughout your systems

requirements are always changing
we spend most of our time in maintaince mode, reorganizing and re-expressing the knowledge in our system

the alternative is having the same thing expressed in 2+ places

rather than writing code that represents external data in a fixed structure, just stick it into a key/value data structure
avoids breaking changes
later validate the map contains the data you need in order to proceed 

#########################
topic 10 - orthogonality 
#########################
orthogonality in computing = decoupling 
2+ things are orthogonal if changes in 1 system do not affect any others

when components of a system are highly independent, there is no such thing as a local fix

we want to design components that are
- self-contained
- independent
- with a single, well-defined purpose

increase productivity
changes localized > development time + testing time reduced

promotes reuse
if components have specific, well-defined responsibilities, they can be combined with new components
regardless if originally envisioned those components interacting

reduce risk
easier to slice out broken components + replace 
make small changes to one area > should only affect that small area = not cascading failures
better tested = easier to run tests on small components
you will not be as tightly coupled to a third party vendor bc interfaces are isolated to small components 
can swap out later on if things change

design
once you have components mapped out ask yourself
"if I dramatically change the requirements behind a particular function, how many modules are affected?"
the answer should be 1 

how decoupled are you from changes made in the real world?
are you using a telephone # as user ID?
what if telephone company changes area codes?
don't rely on properties of things you cannot control



#########################
topic 11 - reversibility 
#########################
as the pace of change increases, it becomes harder and harder to keep our applications relevant 
techniques to help insulate projects from their changing environments

#########################
topic 12 - tracer bullets 
#########################
style of development that allows you to gather requirements, test design, and implement code at the same time
it's the only way to keep up with the pace of modern life

#########################
topic 13 - prototypes and post it notes 
#########################
use prototyping to test architectures, algorithms, interfaces, and ideas
it is critical to test ideas and get feedback before you commit to them

#########################
topic 14 - domain languages 
#########################

#########################
topic 15 - estimating 
#########################
world of limited time + resources
keep boss + clients happier if you get good at working out how long things will take



