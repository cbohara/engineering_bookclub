CDK solution to trigger state machine 
https://github.com/awslabs/aws-solutions-constructs/tree/main/source/patterns/@aws-solutions-constructs/aws-s3-step-function

Orchestrate multiple ETL jobs using AWS Step Functions and AWS Lambda
https://aws.amazon.com/blogs/big-data/orchestrate-multiple-etl-jobs-using-aws-step-functions-and-aws-lambda/

what are the pain points step functions address?
no single visual representation of ETL workflow
tracing the overall workflow status
handling error scenarios

step functions
web service
coordiante components using visual workflows
build apps from individual components 
each component performs a discret function = task
can stitch together different tasks to apply to multiple applications quickly 
DRY 

example ETL workflow 
process sales dataset (PSD) - read in sales data, group by, transform, write output to parquet S3
process marketing dataset (PMD) - read marketing dataset, transform, write output to parquet S3
join marketing + sales datasets (JMSD) - read the parquet S3 files, perform inner join, sort, write to S3

timing
sales + marketing data sets are uploaded to S3 at random times 
PSD job should start as soon as Sales dataset file is uploaded
PMD job should start as soon as Marketing dataset file is uploaded 
parallel ETL jobs can start and finish anytime 
final JMSD job can only start after parallel PSD and PMD jobs are complete

pipeline starts with AWS step functions state machine
state machine defines the steps in the ETL workflow
invokes the ETL jobs via Lambda functions = ETL Runner
ex: Lambda job that launches Glue job
ETL Runners are invoked by activity tasks in step functions
